name: Automated Release Process

on:
  push:
    branches:
      - main
      - 'versioning'
    tags:
      - v*

permissions:
  contents: write
  pull-requests: write
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_FRONTEND: app-frontend
  IMAGE_NAME_SERVICE: app-service

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/checkout@v4
        with:
            fetch-depth: 0
            token: ${{ secrets.GITHUB_TOKEN }} 

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Check GITHUB_TOKEN permissions
        run: |
          echo "Permissions for GITHUB_TOKEN:"
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
    https://api.github.com/repos/${{ github.repository }}/actions/permissions

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version information
        id: vars
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
            LATEST_TAG=${LATEST_TAG#v}
            IFS='.' read -ra ADDR <<< "$LATEST_TAG"
            PATCH=$((ADDR[2] + 1))
            VERSION="${ADDR[0]}.${ADDR[1]}.$PATCH"
            if [[ "${GITHUB_REF}" == refs/heads/main ]]; then
              VERSION="v$VERSION"
            elif [[ "${GITHUB_REF}" == refs/heads/beta/* ]]; then
              VERSION="v$VERSION-beta-$(date +%Y%m%d)"
            fi
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ env.VERSION }}
          REPO: ${{ github.repository }}
        run: |
          IS_PRERELEASE=false
          if [[ $VERSION == *-* ]]; then
            IS_PRERELEASE=true
          fi

          gh release create "$VERSION" \
              --repo="$REPO" \
              --title="${REPO#*/} ${VERSION#v}" \
              --generate-notes \
              $([[ $IS_PRERELEASE == true ]] && echo "--prerelease")

      - name: Build and Push App Service Docker Image
        run: |
          IMAGE_ID=${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME_SERVICE }}
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          echo "Building Docker image with tag $IMAGE_ID:${{ env.VERSION }}"
          docker build service --file service/Dockerfile --tag $IMAGE_ID:${{ env.VERSION }} --label "runnumber=${GITHUB_RUN_ID}"
          docker push $IMAGE_ID:${{ env.VERSION }}

      - name: Build and Push App Frontend Docker Image
        run: |
          IMAGE_ID=${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME_FRONTEND }}
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          echo "Building Docker image with tag $IMAGE_ID:${{ env.VERSION }}"
          docker build frontend --file frontend/Dockerfile --tag $IMAGE_ID:${{ env.VERSION }} --label "runnumber=${GITHUB_RUN_ID}"
          docker push $IMAGE_ID:${{ env.VERSION }}
